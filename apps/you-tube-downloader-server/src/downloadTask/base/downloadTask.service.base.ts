/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, DownloadTask as PrismaDownloadTask } from "@prisma/client";

export class DownloadTaskServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DownloadTaskCountArgs, "select">
  ): Promise<number> {
    return this.prisma.downloadTask.count(args);
  }

  async downloadTasks(
    args: Prisma.DownloadTaskFindManyArgs
  ): Promise<PrismaDownloadTask[]> {
    return this.prisma.downloadTask.findMany(args);
  }
  async downloadTask(
    args: Prisma.DownloadTaskFindUniqueArgs
  ): Promise<PrismaDownloadTask | null> {
    return this.prisma.downloadTask.findUnique(args);
  }
  async createDownloadTask(
    args: Prisma.DownloadTaskCreateArgs
  ): Promise<PrismaDownloadTask> {
    return this.prisma.downloadTask.create(args);
  }
  async updateDownloadTask(
    args: Prisma.DownloadTaskUpdateArgs
  ): Promise<PrismaDownloadTask> {
    return this.prisma.downloadTask.update(args);
  }
  async deleteDownloadTask(
    args: Prisma.DownloadTaskDeleteArgs
  ): Promise<PrismaDownloadTask> {
    return this.prisma.downloadTask.delete(args);
  }
}
